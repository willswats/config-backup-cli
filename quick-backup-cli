#!/bin/sh

SCRIPT_NAME="quick-backup-cli"
VERSION="v2.1"

SCRIPT_CONFIG="$HOME"/.config/"$SCRIPT_NAME"/
PROGRAMS_CSV="$SCRIPT_CONFIG"programs.csv

add_trailing_slash_if_not() {
	if ! echo "$1" | grep -q '\b/$'; then
		echo "$1/"
	else
		echo "$1"
	fi
}

check_dir_exists() {
	if [ ! -d "$1" ]; then
		printf "Error: The directory '%s' does not exist.\n" "$1"
		exit 1
	fi
}

version_info() {
	printf "%s %s\n" "$SCRIPT_NAME" "$VERSION"
	exit 0
}

help_info() {
	printf "Usage: %s [DIRECTORY]
Example: %s ~/Drive/Backups/

Options:
  -v, --version
    Show the version of the script
  -h, --help
    Show this help message and exit\n" "$SCRIPT_NAME" "$SCRIPT_NAME"
	exit 0
}

if [ "$1" = "--version" ] || [ "$1" = "-v" ]; then
	version_info
elif [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
	help_info
fi

get_confirmation() {
	printf "This will:\n"
	printf "  1. Trash (if it exists) '%s'\n" "$1"
	printf "  2. Make the directory '%s'\n" "$1"
	printf "  3. Copy the contents of '%s' to '%s'\n" "$2" "$1"
	printf "Are you sure? y/n\n"
	read -r confirmation
	if [ ! "$confirmation" = "y" ] && [ ! "$confirmation" = "Y" ]; then
		printf "Aborted.\n"
		exit 0
	fi
}

trash_and_copy() {
	check_dir_exists "$2"

	if [ -d "$1" ]; then
		trash "$1"
		printf "Sent '%s' to the trash.\n" "$1"
	fi

	mkdir -p "$1"
	printf "Made the '%s' directory.\n" "$1"

	cp -r "$2"* "$1"
	printf "Copied the contents of '%s' to '%s'.\n" "$2" "$1"
}

print_programs() {
	printf "Select a program (number):\n"
	num=1
	while IFS="," read -r program_name _; do
		printf "  %s. %s\n" "$num" "$program_name"
		num=$((num + 1))
	done <"$PROGRAMS_CSV"
}

configure() {
	printf "(1 of 3) Enter program name (this is only used within %s):\n" $SCRIPT_NAME
	read -r program_name

	if [ "$program_name" = "" ]; then
		printf "Error: program name cannot be empty.\n"
		exit 1
	fi

	printf "(2 of 3) Enter the path to the directory that you would like to backup (e.g. '/home/user/.config/retroarch', '/home/user/.local/share/osu'):\n"
	read -r program_directory

	program_directory=$(add_trailing_slash_if_not "$program_directory")
	check_dir_exists "$program_directory"

	printf "(3 of 3) Enter the path to the backup directory (e.g. '/home/user/drive/backups'):\n"
	read -r backup_directory

	backup_directory=$(add_trailing_slash_if_not "$backup_directory")
	check_dir_exists "$backup_directory"

	mkdir -p "$SCRIPT_CONFIG"
	echo "$program_name,$program_directory,$backup_directory" >>"$PROGRAMS_CSV"

	printf "Added '%s'!\n" "$program_name"
}

backup() {
	get_confirmation "$2" "$1"
	printf "Backing up...\n"
	trash_and_copy "$2" "$1"
	printf "Done!\n"
}

download() {
	get_confirmation "$1" "$2"
	printf "Downloading...\n"
	trash_and_copy "$1" "$2"
	printf "Done!\n"
}

backup_or_download() {
	if [ ! -f "$PROGRAMS_CSV" ]; then
		printf "Error: backup or download requires '%s' to exist, run configure or create it manually\n" "$PROGRAMS_CSV"
		exit 1
	fi

	print_programs
	read -r program_num

	program_directory=$(sed -n "$program_num"p "$PROGRAMS_CSV" | cut -f2 -d",")
	backup_directory=$(sed -n "$program_num"p "$PROGRAMS_CSV" | cut -f3 -d",")

	if [ "$program_directory" = "" ] || [ "$backup_directory" = "" ]; then
		printf "Error: Invalid program\n"
		exit 1
	fi

	if [ "$1" = "backup" ]; then
		backup "$program_directory" "$backup_directory"
	elif [ "$1" = "download" ]; then
		download "$program_directory" "$backup_directory"
	fi
}

select_an_option() {
	printf "Select an option (number):\n"
	printf "  1. Configure\n"
	printf "  2. Backup\n"
	printf "  3. Download\n"
	read -r option

	if [ "$option" = "1" ]; then
		configure
	elif [ "$option" = "2" ]; then
		backup_or_download "backup"
	elif [ "$option" = "3" ]; then
		backup_or_download "download"
	else
		printf "Error: Invalid option.\n"
		exit 1
	fi
}

select_an_option
