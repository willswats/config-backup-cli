#!/bin/sh

PROGRAM_NAME="quick-backup-cli"
VERSION="v1.6"

CONFIG_DEST="$1"
CONFIG=$HOME/.config/
PROGRAMS_CSV="$CONFIG""$PROGRAM_NAME"/programs.csv

# $1 directory
check_trailing_slash() {
	if ! echo "$1" | grep -q '\b/$'; then
		printf "Error: Directory must end with a trailing '/'.\n"
		exit 1
	fi
}

# $1 directory
check_dir_exists() {
	if [ ! -d "$1" ]; then
		printf "Error: The directory '%s' does not exist.\n" "$1"
		exit 1
	fi
}

version_info() {
	printf "%s %s\n" $PROGRAM_NAME $VERSION
	exit 0
}

help_info() {
	printf "Usage: %s [DIRECTORY]
Example: %s ~/Drive/Backups/

Options:
  -v, --version
    Show the version of the script
  -h, --help
    Show this help message and exit\n" $PROGRAM_NAME $PROGRAM_NAME
	exit 0
}

if [ "$1" = "--version" ] || [ "$1" = "-v" ]; then
	version_info
fi

if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
	help_info
fi

if [ ! -d "$1" ]; then
	printf "Usage: %s [DIRECTORY]\n" $PROGRAM_NAME
	printf "Try '%s --help' for more information.\n" $PROGRAM_NAME
	exit 1
else
	check_trailing_slash "$1"
fi

trash_and_copy() {
	# If directory $2 and $3 do not exist, then check_dir_exists will
	# cause the code to exit, therefore, only trash if both of them exist
	if [ -d "$1" ] && [ -d "$2" ] && [ -d "$3" ]; then
		trash "$1"
		printf "Sent '%s' to the trash.\n" "$1"
	fi

	# Make sure that cp is successful
	check_dir_exists "$2"
	check_dir_exists "$3"

	cp -r "$2" "$3"
	printf "Copied '%s' to '%s'.\n" "$2" "$3"
}

get_confirmation() {
	printf "This will trash '%s' (if it exists) and copy '%s' to '%s'.\n" "$1" "$2" "$3"
	printf "Are you sure? y/n\n"
	read -r confirmation
	if [ ! "$confirmation" = "y" ] && [ ! "$confirmation" = "Y" ]; then
		printf "Aborted."
		exit 0
	fi
}

print_programs() {
	printf "Select a program (number):\n"
	num=1
	while IFS="," read -r program_name _; do
		echo "$num. $program_name" | sed 's/\///g' # Remove slash
		num=$((num + 1))
	done <"$PROGRAMS_CSV"
}

configure() {
	printf "Enter program directory name (e.g. yuzu/):\n"
	read -r program_name
	printf "Enter program config directory (e.g. /home/user/.config/):\n"
	read -r program_directory

	# TODO: check for preceding and trailing slash as the path must be absolute
	check_trailing_slash "$program_name"
	check_trailing_slash "$program_directory"
	check_dir_exists "$program_directory"
	check_dir_exists "$program_directory$program_name"

	mkdir -p "$CONFIG""$PROGRAM_NAME"
	echo "$program_name,$program_directory" >>"$PROGRAMS_CSV"
}

backup() {
	print_programs
	read -r program_num
	program_name=$(sed -n "$program_num"p "$PROGRAMS_CSV" | cut -f1 -d",")
	program_directory=$(sed -n "$program_num"p "$PROGRAMS_CSV" | cut -f2 -d",")
	# TODO: check if line num exists

	get_confirmation "$CONFIG_DEST$program_name" "$program_directory$program_name" "$CONFIG_DEST"
	printf "Backing up...\n"
	trash_and_copy "$CONFIG_DEST$program_name" "$program_directory$program_name" "$CONFIG_DEST"
	printf "Done!\n"
}

download() {
	print_programs
	read -r program_num
	program_name=$(sed -n "$program_num"p "$PROGRAMS_CSV" | cut -f1 -d",")
	program_directory=$(sed -n "$program_num"p "$PROGRAMS_CSV" | cut -f2 -d",")
	# TODO: check if line num exists

	get_confirmation "$program_directory$program_name" "$CONFIG_DEST$program_name" "$program_directory"
	printf "Downloading...\n"
	trash_and_copy "$program_directory$program_name" "$CONFIG_DEST$program_name" "$program_name"
	printf "Done!\n"
}

select_an_option() {
	printf "Select an option (number):\n"
	printf "1. Configure\n"
	printf "2. Backup\n"
	printf "3. Download\n"
	read -r option

	if [ "$option" = "1" ]; then
		configure
	elif [ "$option" = "2" ]; then
		backup
	elif [ "$option" = "3" ]; then
		download
	else
		printf "Error: Invalid option.\n"
	fi
}

select_an_option
