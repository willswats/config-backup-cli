#!/bin/sh

PROGRAM_NAME="quick-backup-cli"
VERSION="v1.5"

CONFIG_DEST="$1"

CONFIG=$HOME/.config/
LOCAL_SHARE=$HOME/.local/share/

RETROARCH_DIR_NAME="retroarch"
YUZU_DIR_NAME="yuzu"
RPCS3_DIR_NAME="rpcs3"
OSU_LAZER_DIR_NAME="osu"

version_info() {
	printf "%s %s\n" $PROGRAM_NAME $VERSION
	exit 0
}

help_info() {
	printf "Usage: %s [DIRECTORY]
Example: %s ~/Drive/Backups/

Options:
  -v, --version
    Show the version of the script
  -h, --help
    Show this help message and exit\n" $PROGRAM_NAME $PROGRAM_NAME
	exit 0
}

if [ "$1" = "--version" ] || [ "$1" = "-v" ]; then
	version_info
fi

if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
	help_info
fi

if [ ! -d "$1" ]; then
	printf "Usage: %s [DIRECTORY]\n" $PROGRAM_NAME
	printf "Try '%s --help' for more information.\n" $PROGRAM_NAME
	exit 1
elif ! echo "$1" | grep -q '\b/$'; then
	printf "Error: Directory must end with a trailing '/'.\n"
	exit 1
fi

check_dir_exists() {
	if [ ! -d "$1" ]; then
		printf "Error: The directory '%s' does not exist.\n" "$1"
		exit 1
	fi
}

trash_and_copy() {
	# If directory $2 and $3 do not exist, then check_dir_exists will
	# cause the code to exit, therefore, only trash if both of them exist
	if [ -d "$1" ] && [ -d "$2" ] && [ -d "$3" ]; then
		trash "$1"
		printf "Sent '%s' to the trash.\n" "$1"
	fi

	# Make sure that cp is successful
	check_dir_exists "$2"
	check_dir_exists "$3"

	cp -r "$2" "$3"
	printf "Copied '%s' to '%s'.\n" "$2" "$3"
}

get_confirmation() {
	printf "This will trash '%s' (if it exists) and copy '%s' to '%s'.\n" "$1" "$2" "$3"
	printf "Are you sure? y/n\n"
	read -r confirmation
	if [ ! "$confirmation" = "y" ] && [ ! "$confirmation" = "Y" ]; then
		printf "Aborted."
		exit 0
	fi
}

backup_or_download() {
	printf "Select an option (number):\n"
	printf "1. Backup\n"
	printf "2. Download\n"
	read -r option

	if [ "$option" = "1" ]; then
		get_confirmation "$CONFIG_DEST$1" "$2" "$CONFIG_DEST"

		printf "Backing up...\n"
		trash_and_copy "$CONFIG_DEST$1" "$2" "$CONFIG_DEST"
		printf "Done!\n"
	elif [ "$option" = "2" ]; then
		get_confirmation "$2" "$CONFIG_DEST$1" "$3"

		printf "Downloading...\n"
		trash_and_copy "$2" "$CONFIG_DEST$1" "$3"
		printf "Done!\n"
	else
		printf "Error: Invalid option.\n"
	fi
}

backup_or_download_to_config() {
	backup_or_download "$1" "$CONFIG$1" "$CONFIG"
}

backup_or_download_to_local() {
	backup_or_download "$1" "$LOCAL_SHARE$1" "$LOCAL_SHARE"
}

printf "Select a program (number):\n"
printf "1. Retroarch\n"
printf "2. Yuzu\n"
printf "3. RPCS3\n"
printf "4. osu!lazer\n"
read -r program

if [ "$program" = "1" ]; then
	backup_or_download_to_config "$RETROARCH_DIR_NAME"
elif [ "$program" = "2" ]; then
	backup_or_download_to_local "$YUZU_DIR_NAME"
elif [ "$program" = "3" ]; then
	backup_or_download_to_config "$RPCS3_DIR_NAME"
elif [ "$program" = "4" ]; then
	backup_or_download_to_local "$OSU_LAZER_DIR_NAME"
else
	printf "Error: Invalid program.\n"
fi
