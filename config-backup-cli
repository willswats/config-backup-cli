#!/bin/sh

if [ ! -d "$1" ]; then
	printf "Error: No directory specified, pass an existing directory to the script to fix this, for example ~/Drive/Backups/"
	exit
elif ! echo "$1" | grep -q '\b/$'; then
	printf "Error: Directory must end with a trailing /"
	exit
fi

CLOUD_CONFIG_DEST="$1"

CONFIG=$HOME/.config/
LOCAL_SHARE=$HOME/.local/share/

RETROARCH_DIR_NAME="retroarch"
YUZU_DIR_NAME="yuzu"
RPCS3_DIR_NAME="rpcs3"
OSU_LAZER_DIR_NAME="osu"

check_dir_exists() {
	if [ ! -d "$1" ]; then
		printf "\nError: The directory %s does not exist" "$1"
		exit
	fi
}

trash_and_copy() {
	# If directory $2 and $3 do not exist, then check_dir_exists will
	# cause the code to exit, therefore, only trash if both of them exist
	if [ -d "$1" ] && [ -d "$2" ] && [ -d "$3" ]; then
		trash "$1"
		printf "\nSent %s to the trash" "$1"
	fi

	# Make sure that cp is successful
	check_dir_exists "$2"
	check_dir_exists "$3"

	cp -r "$2" "$3"
	printf "\nCopied %s to %s" "$2" "$3"
}

get_confirmation() {
	printf "This will trash %s (if it exists) and copy %s to %s" "$1" "$2" "$3"
	printf "\nAre you sure? y/n"
	printf "\n"
	read -r confirmation
	if [ ! "$confirmation" = "y" ] && [ ! "$confirmation" = "Y" ]; then
		printf "Aborted"
		exit
	fi
}

backup_or_download() {
	printf "Select an option (number):"
	printf "\n1. Backup"
	printf "\n2. Download"
	printf "\n"
	read -r option

	if [ "$option" = "1" ]; then
		get_confirmation "$CLOUD_CONFIG_DEST$1" "$2" "$CLOUD_CONFIG_DEST"

		printf "Backing up..."
		trash_and_copy "$CLOUD_CONFIG_DEST$1" "$2" "$CLOUD_CONFIG_DEST"
		printf "\nDone!"
	elif [ "$option" = "2" ]; then
		get_confirmation "$2" "$CLOUD_CONFIG_DEST$1" "$3"

		printf "Downloading..."
		trash_and_copy "$2" "$CLOUD_CONFIG_DEST$1" "$3"
		printf "\nDone!"
	else
		printf "Error: Invalid option"
	fi
}

backup_or_download_to_config() {
	backup_or_download "$1" "$CONFIG$1" "$CONFIG"
}

backup_or_download_to_local() {
	backup_or_download "$1" "$LOCAL_SHARE$1" "$LOCAL_SHARE"
}

printf "Select a program (number):"
printf "\n1. Retroarch"
printf "\n2. Yuzu"
printf "\n3. RPCS3"
printf "\n4. osu!lazer"
printf "\n"
read -r program

if [ "$program" = "1" ]; then
	backup_or_download_to_config "$RETROARCH_DIR_NAME"
elif [ "$program" = "2" ]; then
	backup_or_download_to_local "$YUZU_DIR_NAME"
elif [ "$program" = "3" ]; then
	backup_or_download_to_config "$RPCS3_DIR_NAME"
elif [ "$program" = "4" ]; then
	backup_or_download_to_local "$OSU_LAZER_DIR_NAME"
else
	printf "Error: Invalid program"
fi
